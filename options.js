/**
 * Block Popup - Options Script
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ø–∞–ø–æ–≤
 */

let sitePopupRules = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
function loadSiteRules() {
  return new Promise((resolve) => {
    chrome.storage.sync.get(['sitePopupRules'], (result) => {
      resolve(result.sitePopupRules || {});
    });
  });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
function saveSiteRules(rules) {
  return new Promise((resolve) => {
    chrome.storage.sync.set({ sitePopupRules: rules }, resolve);
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤
function updateSiteList() {
  const siteList = document.getElementById('siteList');
  
  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
  siteList.innerHTML = '';
  
  const sites = Object.keys(sitePopupRules);
  
  if (sites.length === 0) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–Ω–æ–≤–æ
    const emptySiteList = document.createElement('div');
    emptySiteList.className = 'empty-state';
    emptySiteList.id = 'emptySiteList';
    emptySiteList.innerHTML = `
      <p>–ù–µ—Ç —Å–∞–π—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</p>
      <p>–î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç—ã —á–µ—Ä–µ–∑ popup —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è</p>
    `;
    siteList.appendChild(emptySiteList);
    return;
  }
  
  sites.forEach(hostname => {
    const siteSettings = sitePopupRules[hostname];
    const rulesCount = siteSettings.rules ? siteSettings.rules.length : 0;
    
    const siteItem = document.createElement('div');
    siteItem.className = 'site-list-item';
    siteItem.innerHTML = `
      <div class="site-domain">${hostname}</div>
      <div class="site-info">
        <span class="site-status ${siteSettings.enabled ? 'enabled' : 'disabled'}">
          ${siteSettings.enabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
        </span>
        <span class="rules-count">${rulesCount} –ø—Ä–∞–≤–∏–ª</span>
      </div>
      <div class="site-actions">
        <button class="icon-button edit-site-btn" data-hostname="${hostname}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
        <button class="icon-button export-site-btn" data-hostname="${hostname}" title="–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∞–π—Ç–∞">üì§</button>
        <button class="icon-button delete-site-btn" data-hostname="${hostname}" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
      </div>
    `;
    
    siteList.appendChild(siteItem);
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
  document.querySelectorAll('.edit-site-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const hostname = e.target.dataset.hostname;
      editSite(hostname);
    });
  });
  
  document.querySelectorAll('.export-site-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const hostname = e.target.dataset.hostname;
      exportSiteSettings(hostname);
    });
  });
  
  document.querySelectorAll('.delete-site-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const hostname = e.target.dataset.hostname;
      deleteSite(hostname);
    });
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞
function exportSiteSettings(hostname) {
  const siteSettings = sitePopupRules[hostname];
  if (!siteSettings) {
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞
  const siteExport = {
    [hostname]: siteSettings
  };
  
  const settingsData = document.getElementById('settingsData');
  const importExportArea = document.getElementById('importExportArea');
  
  settingsData.value = JSON.stringify(siteExport, null, 2);
  importExportArea.style.display = 'block';
  
  showNotification(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞ ${hostname} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã`);
  
  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
  importExportArea.scrollIntoView({ behavior: 'smooth' });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let currentEditingSite = null;
let currentEditingRules = [];

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞
function editSite(hostname) {
  const siteSettings = sitePopupRules[hostname];
  if (!siteSettings) return;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Å–∞–π—Ç
  currentEditingSite = hostname;
  currentEditingRules = JSON.parse(JSON.stringify(siteSettings.rules || [])); // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  showRuleEditor(hostname, siteSettings);
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª
function showRuleEditor(hostname, siteSettings) {
  const ruleEditSection = document.getElementById('ruleEditSection');
  const editingSiteName = document.getElementById('editingSiteName');
  const siteEnabledToggle = document.getElementById('siteEnabled');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞
  editingSiteName.textContent = hostname;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
  siteEnabledToggle.checked = siteSettings.enabled;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª
  updateEditRulesList();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  ruleEditSection.style.display = 'block';
  
  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–µ–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  ruleEditSection.scrollIntoView({ behavior: 'smooth' });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Å–∞–π—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  setupSiteToggleHandler();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Å–∞–π—Ç–∞
function setupSiteToggleHandler() {
  const toggleSwitch = document.querySelector('.toggle-switch');
  const siteEnabledToggle = document.getElementById('siteEnabled');
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  const newToggleSwitch = toggleSwitch.cloneNode(true);
  toggleSwitch.parentNode.replaceChild(newToggleSwitch, toggleSwitch);
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
  const newSiteEnabledToggle = document.getElementById('siteEnabled');
  const newToggleSwitchContainer = document.querySelector('.toggle-switch');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
  newToggleSwitchContainer.addEventListener('click', (e) => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Å–∞–º–æ–º—É input
    if (e.target === newSiteEnabledToggle) return;
    
    newSiteEnabledToggle.checked = !newSiteEnabledToggle.checked;
    handleSiteToggleChange();
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è input
  newSiteEnabledToggle.addEventListener('change', handleSiteToggleChange);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Å–∞–π—Ç–∞
function handleSiteToggleChange() {
  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  autoSaveRules();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
function updateEditRulesList() {
  const editRulesList = document.getElementById('editRulesList');
  
  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
  editRulesList.innerHTML = '';
  
  if (currentEditingRules.length === 0) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–Ω–æ–≤–æ
    const emptyRules = document.createElement('div');
    emptyRules.className = 'empty-rules';
    emptyRules.id = 'emptyRules';
    emptyRules.innerHTML = `
      <p>–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</p>
      <p>–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∏–∂–µ</p>
    `;
    editRulesList.appendChild(emptyRules);
    return;
  }
  
  currentEditingRules.forEach((rule, index) => {
    const ruleItem = document.createElement('div');
    ruleItem.className = `rule-item ${rule.enabled === false ? 'disabled' : ''}`;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
    let ruleInfoHTML = `
      <div class="rule-info">
        <div class="rule-description">${rule.description || '–ü—Ä–∞–≤–∏–ª–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
    `;
    
    // –ï—Å–ª–∏ —É –ø—Ä–∞–≤–∏–ª–∞ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö
    if (rule.conditions && Array.isArray(rule.conditions)) {
      ruleInfoHTML += '<div class="rule-conditions">';
      
      rule.conditions.forEach(condition => {
        let conditionText = '';
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É—Å–ª–æ–≤–∏–π
        switch (condition.type) {
          case 'content':
          case 'phrase':
          case 'outerHTML':
          case 'class':
          case 'id':
          case 'selector':
            conditionText = `${getConditionTypeLabel(condition.type)}: "${condition.pattern}"`;
            break;
            
          case 'isPopup':
            conditionText = '–Ø–≤–ª—è–µ—Ç—Å—è –ø–æ–ø–∞–ø–æ–º';
            break;
            
          case 'isLink':
            conditionText = '–Ø–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π';
            break;
            
          case 'hasPopupParent':
            conditionText = `–†–æ–¥–∏—Ç–µ–ª—å-–ø–æ–ø–∞–ø (—É—Ä–æ–≤–µ–Ω—å ${condition.depth || 2})`;
            break;
            
          case 'hasPopupChild':
            conditionText = `–ü–æ—Ç–æ–º–æ–∫-–ø–æ–ø–∞–ø (—É—Ä–æ–≤–µ–Ω—å ${condition.depth || 3})`;
            break;
            
          default:
            conditionText = condition.type;
        }
        
        ruleInfoHTML += `<span class="rule-type">${conditionText}</span>`;
      });
      
      ruleInfoHTML += '</div>';
    } 
    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
    else if (rule.type && rule.pattern) {
      ruleInfoHTML += `
        <div class="rule-conditions">
          <span class="rule-type">${getConditionTypeLabel(rule.type)}: "${rule.pattern}"</span>
        </div>
      `;
    }
    
    ruleInfoHTML += '</div>';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const actionsHTML = `
      <div class="rule-actions">
        <div class="rule-toggle" data-index="${index}">
          <input type="checkbox" ${rule.enabled !== false ? 'checked' : ''} data-index="${index}">
          <span class="rule-toggle-slider"></span>
        </div>
        <button class="edit-rule-btn" data-index="${index}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
        <button class="remove-rule-btn" data-index="${index}" title="–£–¥–∞–ª–∏—Ç—å">√ó</button>
      </div>
    `;
    
    ruleItem.innerHTML = ruleInfoHTML + actionsHTML;
    editRulesList.appendChild(ruleItem);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const toggleContainer = ruleItem.querySelector('.rule-toggle');
    const toggleInput = ruleItem.querySelector('.rule-toggle input');
    const editBtn = ruleItem.querySelector('.edit-rule-btn');
    const removeBtn = ruleItem.querySelector('.remove-rule-btn');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    toggleContainer.addEventListener('click', (e) => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Å–∞–º–æ–º—É input
      if (e.target === toggleInput) return;
      
      const ruleIndex = parseInt(toggleContainer.dataset.index);
      toggleInput.checked = !toggleInput.checked;
      toggleEditRule(ruleIndex, toggleInput);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è input
    toggleInput.addEventListener('change', (e) => {
      const ruleIndex = parseInt(e.target.dataset.index);
      toggleEditRule(ruleIndex, e.target);
    });
    
    editBtn.addEventListener('click', () => editRule(index));
    removeBtn.addEventListener('click', () => removeEditRule(index));
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —É—Å–ª–æ–≤–∏—è
function getConditionTypeLabel(type) {
  const labels = {
    'class': '–ö–ª–∞—Å—Å',
    'id': 'ID',
    'selector': '–°–µ–ª–µ–∫—Ç–æ—Ä',
    'content': '–¢–µ–∫—Å—Ç',
    'phrase': '–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ',
    'outerHTML': 'HTML',
    'isPopup': '–ü–æ–ø–∞–ø',
    'isLink': '–°—Å—ã–ª–∫–∞',
    'hasPopupParent': '–†–æ–¥–∏—Ç–µ–ª—å-–ø–æ–ø–∞–ø',
    'hasPopupChild': '–ü–æ—Ç–æ–º–æ–∫-–ø–æ–ø–∞–ø'
  };
  return labels[type] || type;
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function autoSaveRules() {
  if (!currentEditingSite) return;
  
  const siteEnabledToggle = document.getElementById('siteEnabled');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
  sitePopupRules[currentEditingSite].enabled = siteEnabledToggle.checked;
  sitePopupRules[currentEditingSite].rules = currentEditingRules;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
  saveSiteRules(sitePopupRules).then(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    updateSiteList();
  });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
function toggleEditRule(index, toggleElement) {
  if (currentEditingRules[index]) {
    currentEditingRules[index].enabled = toggleElement.checked;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
    const ruleItem = toggleElement.closest('.rule-item');
    if (toggleElement.checked) {
      ruleItem.classList.remove('disabled');
    } else {
      ruleItem.classList.add('disabled');
    }
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    autoSaveRules();
  }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
function editRule(index) {
  const rule = currentEditingRules[index];
  if (!rule) return;
  
  // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–∞–≤–∏–ª –±–µ–∑ —É—Å–ª–æ–≤–∏–π
  if (rule.type && rule.pattern && !rule.conditions) {
    const newPattern = prompt(
      `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–∏–ø–∞ "${getConditionTypeLabel(rule.type)}"\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω:`,
      rule.pattern
    );
    
    if (newPattern !== null && newPattern.trim()) {
      rule.pattern = newPattern.trim();
      rule.description = `${getConditionTypeLabel(rule.type)}: ${rule.pattern}`;
      updateEditRulesList();
      
      // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      autoSaveRules();
    }
  } 
  // –î–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª —Å —É—Å–ª–æ–≤–∏—è–º–∏
  else if (rule.conditions && Array.isArray(rule.conditions)) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è,
    // –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    alert('–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ popup —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
function removeEditRule(index) {
  if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ?')) {
    currentEditingRules.splice(index, 1);
    updateEditRulesList();
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    autoSaveRules();
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
function addNewRule() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
    const ruleDescription = document.getElementById('newRuleDescription').value.trim();
    
    // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –∏–∑ —Ñ–æ—Ä–º—ã
    const conditions = getConditionsFromForm();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ
    if (conditions.length === 0) {
      showNotification('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ', 'error');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
    const newRule = {
      enabled: true,
      description: ruleDescription || generateRuleDescription(conditions),
      conditions: conditions
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
    currentEditingRules.push(newRule);
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('newRuleDescription').value = '';
    
    // –û—á–∏—â–∞–µ–º —É—Å–ª–æ–≤–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –ø—É—Å—Ç–æ–µ
    const conditionsContainer = document.getElementById('newConditionsContainer');
    conditionsContainer.innerHTML = '';
    addConditionUI(conditionsContainer, null, 0);
    updateConditionButtons();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    updateEditRulesList();
    
    showNotification('–ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    autoSaveRules();
  } catch (error) {
    showNotification(error.message, 'error');
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ UI –¥–ª—è —É—Å–ª–æ–≤–∏—è
function addConditionUI(container, condition = null, index) {
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É—Å–ª–æ–≤–∏—è
  const conditionItem = document.createElement('div');
  conditionItem.className = 'condition-item';
  conditionItem.dataset.index = index;
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å–ª–æ–≤–∏—è
  const conditionHeader = document.createElement('div');
  conditionHeader.className = 'condition-header';
  conditionHeader.innerHTML = `
    <span class="condition-title">–£—Å–ª–æ–≤–∏–µ ${index + 1}</span>
    <button type="button" class="remove-condition-btn" title="–£–¥–∞–ª–∏—Ç—å —É—Å–ª–æ–≤–∏–µ">√ó</button>
  `;
  
  // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Å–ª–æ–≤–∏—è
  const conditionContent = document.createElement('div');
  conditionContent.className = 'condition-content';
  
  // –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å–ª–æ–≤–∏—è
  const typeSelect = document.createElement('select');
  typeSelect.className = 'condition-type';
  typeSelect.innerHTML = `
    <option value="content">–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç</option>
    <option value="phrase">–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ</option>
    <option value="outerHTML">HTML —Å–æ–¥–µ—Ä–∂–∏—Ç</option>
    <option value="class">–ö–ª–∞—Å—Å</option>
    <option value="id">ID</option>
    <option value="selector">–°–µ–ª–µ–∫—Ç–æ—Ä</option>
    <option value="isPopup">–Ø–≤–ª—è–µ—Ç—Å—è –ø–æ–ø–∞–ø–æ–º</option>
    <option value="isLink">–Ø–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π</option>
    <option value="hasPopupParent">–†–æ–¥–∏—Ç–µ–ª—å-–ø–æ–ø–∞–ø</option>
    <option value="hasPopupChild">–ü–æ—Ç–æ–º–æ–∫-–ø–æ–ø–∞–ø</option>
  `;
  
  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è
  const valueContainer = document.createElement('div');
  valueContainer.className = 'condition-value-container';
  
  // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞
  const patternInput = document.createElement('input');
  patternInput.type = 'text';
  patternInput.className = 'condition-pattern';
  patternInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω';
  
  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥–ª—É–±–∏–Ω—ã (–¥–ª—è hasPopupParent –∏ hasPopupChild)
  const depthContainer = document.createElement('div');
  depthContainer.className = 'condition-depth-container';
  depthContainer.style.display = 'none';
  depthContainer.innerHTML = `
    <label>–£—Ä–æ–≤–µ–Ω—å:</label>
    <input type="number" class="condition-depth" min="1" max="5" value="2">
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
  valueContainer.appendChild(patternInput);
  valueContainer.appendChild(depthContainer);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Å–ª–æ–≤–∏—è
  conditionContent.appendChild(typeSelect);
  conditionContent.appendChild(valueContainer);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —ç–ª–µ–º–µ–Ω—Ç —É—Å–ª–æ–≤–∏—è
  conditionItem.appendChild(conditionHeader);
  conditionItem.appendChild(conditionContent);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —É—Å–ª–æ–≤–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  container.appendChild(conditionItem);
  
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
  if (condition) {
    typeSelect.value = condition.type || 'content';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if (condition.type === 'isPopup' || condition.type === 'isLink') {
      patternInput.style.display = 'none';
    } else if (condition.type === 'hasPopupParent' || condition.type === 'hasPopupChild') {
      patternInput.style.display = 'none';
      depthContainer.style.display = 'flex';
      depthContainer.querySelector('.condition-depth').value = condition.depth || 2;
    } else {
      patternInput.value = condition.pattern || '';
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  typeSelect.addEventListener('change', function() {
    updateConditionVisibility(conditionItem);
  });
  
  // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è
  const removeBtn = conditionHeader.querySelector('.remove-condition-btn');
  removeBtn.addEventListener('click', function() {
    removeCondition(container, index);
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  updateConditionVisibility(conditionItem);
  
  return conditionItem;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π —É—Å–ª–æ–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
function updateConditionVisibility(conditionItem) {
  const typeSelect = conditionItem.querySelector('.condition-type');
  const patternInput = conditionItem.querySelector('.condition-pattern');
  const depthContainer = conditionItem.querySelector('.condition-depth-container');
  
  const type = typeSelect.value;
  
  // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  if (type === 'isPopup' || type === 'isLink') {
    patternInput.style.display = 'none';
    depthContainer.style.display = 'none';
  } else if (type === 'hasPopupParent' || type === 'hasPopupChild') {
    patternInput.style.display = 'none';
    depthContainer.style.display = 'flex';
  } else {
    patternInput.style.display = 'block';
    depthContainer.style.display = 'none';
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Å–ª–æ–≤–∏—è
function addCondition() {
  const conditionsContainer = document.getElementById('newConditionsContainer');
  const conditionCount = conditionsContainer.children.length;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ
  addConditionUI(conditionsContainer, null, conditionCount);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É—Å–ª–æ–≤–∏–π
  updateConditionButtons();
}

// –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
function removeCondition(container, index) {
  const conditionItems = container.querySelectorAll('.condition-item');
  
  // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ, –Ω–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ
  if (conditionItems.length <= 1) {
    showNotification('–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ', 'error');
    return;
  }
  
  // –£–¥–∞–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ
  conditionItems[index].remove();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—Å–ª–æ–≤–∏–π
  conditionItems.forEach((item, i) => {
    if (i > index) {
      item.dataset.index = i - 1;
      item.querySelector('.condition-title').textContent = `–£—Å–ª–æ–≤–∏–µ ${i}`;
    }
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É—Å–ª–æ–≤–∏–π
  updateConditionButtons();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É—Å–ª–æ–≤–∏–π
function updateConditionButtons() {
  const conditionsContainer = document.getElementById('newConditionsContainer');
  const conditionItems = conditionsContainer.querySelectorAll('.condition-item');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ª–æ–≤–∏–π
  conditionItems.forEach(item => {
    const removeBtn = item.querySelector('.remove-condition-btn');
    removeBtn.style.display = conditionItems.length > 1 ? 'block' : 'none';
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∏–∑ —Ñ–æ—Ä–º—ã
function getConditionsFromForm() {
  const conditionsContainer = document.getElementById('newConditionsContainer');
  const conditionItems = conditionsContainer.querySelectorAll('.condition-item');
  const conditions = [];
  
  conditionItems.forEach(item => {
    const typeSelect = item.querySelector('.condition-type');
    const patternInput = item.querySelector('.condition-pattern');
    const depthInput = item.querySelector('.condition-depth');
    
    const type = typeSelect.value;
    let condition = { type };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if (type === 'isPopup' || type === 'isLink') {
      condition.value = true;
    } else if (type === 'hasPopupParent' || type === 'hasPopupChild') {
      condition.depth = parseInt(depthInput.value) || 2;
    } else {
      condition.pattern = patternInput.value.trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
      if (!condition.pattern) {
        throw new Error(`–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É—Å–ª–æ–≤–∏—è ${parseInt(item.dataset.index) + 1}`);
      }
    }
    
    conditions.push(condition);
  });
  
  return conditions;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π
function generateRuleDescription(conditions) {
  if (!conditions || conditions.length === 0) {
    return '–ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ';
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —É—Å–ª–æ–≤–∏–π
  const descriptions = conditions.slice(0, 2).map(condition => {
    switch (condition.type) {
      case 'content':
      case 'phrase':
      case 'outerHTML':
      case 'class':
      case 'id':
      case 'selector':
        return `${getConditionTypeLabel(condition.type)}: "${condition.pattern}"`;
        
      case 'isPopup':
        return '–Ø–≤–ª—è–µ—Ç—Å—è –ø–æ–ø–∞–ø–æ–º';
        
      case 'isLink':
        return '–Ø–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π';
        
      case 'hasPopupParent':
        return `–†–æ–¥–∏—Ç–µ–ª—å-–ø–æ–ø–∞–ø (–¥–æ —É—Ä–æ–≤–Ω—è ${condition.depth || 2})`;
        
      case 'hasPopupChild':
        return `–ü–æ—Ç–æ–º–æ–∫-–ø–æ–ø–∞–ø (–¥–æ —É—Ä–æ–≤–Ω—è ${condition.depth || 3})`;
        
      default:
        return condition.type;
    }
  });
  
  // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–π –±–æ–ª—å—à–µ –¥–≤—É—Ö, –¥–æ–±–∞–≤–ª—è–µ–º "–∏ –¥—Ä—É–≥–∏–µ"
  if (conditions.length > 2) {
    return `${descriptions.join(' + ')} –∏ –¥—Ä—É–≥–∏–µ`;
  }
  
  return descriptions.join(' + ');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function saveRuleChanges() {
  if (!currentEditingSite) return;
  
  const siteEnabledToggle = document.getElementById('siteEnabled');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
  sitePopupRules[currentEditingSite].enabled = siteEnabledToggle.checked;
  sitePopupRules[currentEditingSite].rules = currentEditingRules;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
  saveSiteRules(sitePopupRules).then(() => {
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    hideRuleEditor();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤
    updateSiteList();
    
    showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  });
}

// –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cancelRuleEdit() {
  if (confirm('–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? –ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
    hideRuleEditor();
  }
}

// –°–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function hideRuleEditor() {
  const ruleEditSection = document.getElementById('ruleEditSection');
  ruleEditSection.style.display = 'none';
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  currentEditingSite = null;
  currentEditingRules = [];
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞
function deleteSite(hostname) {
  if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç ${hostname} –∏ –≤—Å–µ –µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞?`)) {
    delete sitePopupRules[hostname];
    saveSiteRules(sitePopupRules).then(() => {
      updateSiteList();
      showNotification('–°–∞–π—Ç —É–¥–∞–ª–µ–Ω');
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
function exportSettings() {
  const settingsData = document.getElementById('settingsData');
  const importExportArea = document.getElementById('importExportArea');
  
  settingsData.value = JSON.stringify(sitePopupRules, null, 2);
  importExportArea.style.display = 'block';
  
  showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
}

// –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
function importSettings() {
  const importExportArea = document.getElementById('importExportArea');
  const settingsData = document.getElementById('settingsData');
  
  settingsData.value = '';
  importExportArea.style.display = 'block';
  settingsData.focus();
  
  showNotification('–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"');
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copySettings() {
  const settingsData = document.getElementById('settingsData');
  
  if (settingsData.value) {
    navigator.clipboard.writeText(settingsData.value).then(() => {
      showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }).catch(() => {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      settingsData.select();
      document.execCommand('copy');
      showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    });
  }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function applyImport() {
  const settingsData = document.getElementById('settingsData');
  
  try {
    const importedRules = JSON.parse(settingsData.value);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (typeof importedRules !== 'object' || importedRules === null) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ —Å–∞–π—Ç–∞
    for (const [hostname, settings] of Object.entries(importedRules)) {
      if (!settings.hasOwnProperty('enabled') || !Array.isArray(settings.rules)) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∞–π—Ç–∞ ${hostname}`);
      }
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∞–π—Ç—ã –∏ –ø—Ä–∞–≤–∏–ª–∞
    let addedSites = 0;
    let addedRules = 0;
    
    for (const [hostname, importedSettings] of Object.entries(importedRules)) {
      if (!sitePopupRules[hostname]) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∞–π—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
        sitePopupRules[hostname] = {
          enabled: importedSettings.enabled,
          rules: [...importedSettings.rules]
        };
        addedSites++;
        addedRules += importedSettings.rules.length;
      } else {
        // –°–∞–π—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        const existingRules = sitePopupRules[hostname].rules || [];
        
        for (const importedRule of importedSettings.rules) {
          let isDuplicate = false;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∞–≤–∏–ª–∞
          if (importedRule.conditions && Array.isArray(importedRule.conditions)) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª —Å —É—Å–ª–æ–≤–∏—è–º–∏
            isDuplicate = existingRules.some(existingRule => {
              // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –∏–º–µ–µ—Ç —É—Å–ª–æ–≤–∏–π, —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç
              if (!existingRule.conditions || !Array.isArray(existingRule.conditions)) {
                return false;
              }
              
              // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª–æ–≤–∏–π —Ä–∞–∑–Ω–æ–µ, —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç
              if (existingRule.conditions.length !== importedRule.conditions.length) {
                return false;
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ
              return importedRule.conditions.every(importedCondition => {
                return existingRule.conditions.some(existingCondition => {
                  // –î–ª—è —É—Å–ª–æ–≤–∏–π —Å pattern
                  if (importedCondition.pattern && existingCondition.pattern) {
                    return importedCondition.type === existingCondition.type && 
                           importedCondition.pattern === existingCondition.pattern;
                  }
                  // –î–ª—è —É—Å–ª–æ–≤–∏–π —Å depth
                  else if (importedCondition.depth && existingCondition.depth) {
                    return importedCondition.type === existingCondition.type && 
                           importedCondition.depth === existingCondition.depth;
                  }
                  // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π (isPopup, isLink)
                  else {
                    return importedCondition.type === existingCondition.type;
                  }
                });
              });
            });
          } 
          // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª
          else if (importedRule.type && importedRule.pattern) {
            isDuplicate = existingRules.some(existingRule => 
              (existingRule.type === importedRule.type && 
               existingRule.pattern === importedRule.pattern) ||
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ, –Ω–µ—Ç –ª–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å —Ç–∞–∫–∏–º –∂–µ —É—Å–ª–æ–≤–∏–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
              (existingRule.conditions && Array.isArray(existingRule.conditions) &&
               existingRule.conditions.some(condition => 
                 condition.type === importedRule.type && 
                 condition.pattern === importedRule.pattern
               ))
            );
          }
          
          if (!isDuplicate) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if (importedRule.conditions && Array.isArray(importedRule.conditions)) {
              existingRules.push({
                enabled: importedRule.enabled !== false,
                description: importedRule.description || generateRuleDescription(importedRule.conditions),
                conditions: importedRule.conditions
              });
            } else if (importedRule.type && importedRule.pattern) {
              existingRules.push({
                type: importedRule.type,
                pattern: importedRule.pattern,
                enabled: importedRule.enabled !== false,
                description: importedRule.description || `${getConditionTypeLabel(importedRule.type)}: ${importedRule.pattern}`
              });
            }
            addedRules++;
          }
        }
        
        sitePopupRules[hostname].rules = existingRules;
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Chrome storage
    saveSiteRules(sitePopupRules).then(() => {
      updateSiteList();
      
      document.getElementById('importExportArea').style.display = 'none';
      
      if (addedSites === 0 && addedRules === 0) {
        showNotification('–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
      } else {
        showNotification(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedSites} —Å–∞–π—Ç–æ–≤ –∏ ${addedRules} –ø—Ä–∞–≤–∏–ª`);
      }
    });
    
  } catch (error) {
    showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + error.message, 'error');
  }
}

// –°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function resetAllSettings() {
  if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
    sitePopupRules = {};
    saveSiteRules(sitePopupRules).then(() => {
      updateSiteList();
      showNotification('–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    });
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
  saveSiteRules(sitePopupRules).then(() => {
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  });
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'success') {
  const notification = document.getElementById('notification');
  const notificationText = document.getElementById('notificationText');
  
  notificationText.textContent = message;
  notification.className = `notification ${type}`;
  notification.classList.add('show');
  
  setTimeout(() => {
    notification.classList.remove('show');
  }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
    sitePopupRules = await loadSiteRules();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateSiteList();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('exportSettings').addEventListener('click', exportSettings);
    document.getElementById('importSettings').addEventListener('click', importSettings);
    document.getElementById('copySettings').addEventListener('click', copySettings);
    document.getElementById('applyImport').addEventListener('click', applyImport);
    document.getElementById('resetAllSettings').addEventListener('click', resetAllSettings);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª
    document.getElementById('addRuleBtn').addEventListener('click', addNewRule);
    document.getElementById('saveRulesBtn').addEventListener('click', saveRuleChanges);
    document.getElementById('cancelEditBtn').addEventListener('click', cancelRuleEdit);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è
    document.getElementById('addConditionBtn').addEventListener('click', addCondition);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É —Å –æ–¥–Ω–∏–º –ø—É—Å—Ç—ã–º —É—Å–ª–æ–≤–∏–µ–º
    const conditionsContainer = document.getElementById('newConditionsContainer');
    if (conditionsContainer && conditionsContainer.children.length === 0) {
      addConditionUI(conditionsContainer, null, 0);
      updateConditionButtons();
    }
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const saveDebounced = debounce(saveSettings, 1000);
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    chrome.storage.onChanged.addListener((changes) => {
      if (changes.sitePopupRules) {
        sitePopupRules = changes.sitePopupRules.newValue || {};
        updateSiteList();
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ options:', error);
    showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è debounce
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', init);
